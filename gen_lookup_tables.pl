#!/usr/bin/perl -w

#
# Generate lookup table that, given a packed DNA byte (four bases) and
# a character (A, C, G or T), returns how many times that character
# occurs in that packed byte.  Useful for quickly counting character
# occurrences in long strings.  The LUT is indexed first by character
# then by byte.
#
# Larger lookup tables are also possible, though they seem
# counterproductive.  E.g., looking up eight bases at a time yields a
# 256K LUT, which doesn't fit in L1.  A four-base LUT is 1KB, easily
# fitting in L1.
#
# An open question is whether this is the best way to do counts for
# very long stretches of characters.  Perhaps there is a way to count
# wider chunks at a time using, e.g., SSE instructions.
#
# See Ebwt::countUpTo(...) in ebwt.cpp. 
#

my @as = ();
my @cs = ();
my @gs = ();
my @ts = ();

# Compile character arrays
my $i;
for($i = 0; $i < 256; $i++) {
	my $b01 = ($i >> 0) & 3;
	my $b23 = ($i >> 2) & 3;
	my $b45 = ($i >> 4) & 3;
	my $b67 = ($i >> 6) & 3;
	
	my $a = ($b01 == 0) + ($b23 == 0) + ($b45 == 0) + ($b67 == 0);
	my $c = ($b01 == 1) + ($b23 == 1) + ($b45 == 1) + ($b67 == 1);
	my $g = ($b01 == 2) + ($b23 == 2) + ($b45 == 2) + ($b67 == 2);
	my $t = ($b01 == 3) + ($b23 == 3) + ($b45 == 3) + ($b67 == 3);
	
	push @as, $a;
	push @cs, $c;
	push @gs, $g;
	push @ts, $t;
}

my $entsPerLine = 16;

print "#include <stdint.h>\n\n";
print "/* Generated by gen_lookup_tables.pl */\n\n";
print "uint8_t cCntLUT[4][256] = {\n";

# Print As array
print "\t/* As */ {\n";
for($i = 0; $i < 256; $i++) {
	print "\t\t" if(($i % $entsPerLine) == 0);
	print "$as[$i], ";
	print "\n" if(($i % $entsPerLine) == ($entsPerLine-1));
}
print "\t},\n";

# Print Cs array
print "\t/* Cs */ {\n";
for($i = 0; $i < 256; $i++) {
	print "\t\t" if(($i % $entsPerLine) == 0);
	print "$cs[$i], ";
	print "\n" if(($i % $entsPerLine) == ($entsPerLine-1));
}
print "\t},\n";

# Print Gs array
print "\t/* Gs */ {\n";
for($i = 0; $i < 256; $i++) {
	print "\t\t" if(($i % $entsPerLine) == 0);
	print "$gs[$i], ";
	print "\n" if(($i % $entsPerLine) == ($entsPerLine-1));
}
print "\t},\n";

# Print Ts array
print "\t/* Ts */ {\n";
for($i = 0; $i < 256; $i++) {
	print "\t\t" if(($i % $entsPerLine) == 0);
	print "$ts[$i], ";
	print "\n" if(($i % $entsPerLine) == ($entsPerLine-1));
}
print "\t}\n";

print "};\n";
