Bowtie: an Ultrafast, Lightweight Short Read Aligner

Bowtie Manual
=============

 What is Bowtie?
 ---------------

 Bowtie is an ultrafast, memory-efficient short read aligner geared
 toward quickly aligning large sets of short DNA sequences (reads) to
 mammalian genomes. It aligns 35-base-pair reads to the human genome at
 a rate of 25 million reads per hour on a typical workstation with 2
 gigabytes of memory. Bowtie indexes the genome with a Burrows-Wheeler
 index to keep its memory footprint small: as small as 1.1 GB for the
 human genome (using -z).  Unlike tools using heavier-duty indexing
 schemes like suffix trees, suffix arrays, or spaced seeds, Bowtie can
 be run efficiently on a typical desktop PC and the index can be easily
 saved to disk and reused across alignment runs. Bowtie supports
 alignment policies equivalent to Maq and SOAP but is much faster:
 about 35x faster than Maq and over 250x faster than SOAP when aligning
 to the human genome.  Bowtie's output format can be converted to the
 format used by Maq, allowing users to rapidly align reads with Bowtie
 then identify variations with Maq. The Bowtie tools run on the command
 line under Windows XP, Mac OS X, and Linux.

 What isn't Bowtie?
 ------------------

 Bowtie is not a general-purpose alignment tool like MUMmer, BLAST or
 Vmatch. Bowtie works best with short reads (though it supports reads
 up to 1024 bases in length) and is designed to be extremely fast for
 read sets where a) many of the reads have at least one good, valid
 alignment, b) many of the reads are relatively high-quality, and c)
 the number of alignments reported per read is small (close to 1).
 These criteria are generally satisfied in the context of mammalian
 resequencing projects, but less competitive running times may be
 observed in other contexts.

 Bowtie does not yet work in ABI "color space," does not yet report
 alignments with insertions or deletions, and does not yet handle joint
 alignment of paired-end reads.  All off these are future work, with
 paired-end alignment as the highest priority.

 Obtaining Bowtie Binaries
 -------------------------

 Obtain Bowtie binaries for your platform from the Download section of
 the Sourceforge project site.  Binaries are currently available for
 Linux, Windows, and Mac OS X.

 https://sourceforge.net/project/showfiles.php?group_id=236897&package_id=288231

 Obtaining and Building Bowtie Sources
 -------------------------------------

 Building Bowtie requires a GNU-like environment that includes GCC, GNU
 Make and other basics.  It should be possible to build Bowtie on
 a vanilla Linux or Mac installation.  Bowtie can also be built on
 Windows using Cygwin or MinGW (MinGW recommended).  If building with
 MinGW, first install MinGW and MSYS (http://www.mingw.org/), the zlib
 library (http://cygwin.com/packages/mingw-zlib/), and the pthreads
 library (http://sourceware.org/pthreads-win32/).

 Bowtie depends on code from Maq v0.6.6 (http://maq.sf.net) and from
 the SeqAn library v1.1 (http://www.seqan.de).  However, all supporting
 code is included in the Bowtie source archive, so there is no need to
 download additional sources.

 Obtain Bowtie sources from the Download section of the Sourceforge
 project site:

 https://sourceforge.net/project/showfiles.php?group_id=236897&package_id=288231

 Extract the sources, change to the directory where they were
 extracted, and build the Bowtie tools by running GNU make (usually
 with the command 'make', but sometimes with 'gmake') with no
 arguments.  If building with MinGW, run GNU make from the MSYS
 environment.

 Due to the -p option, Bowtie needs the pthreads library to compile and
 run. To compile Bowtie without pthreads support (which disables the -p
 option), use 'make BOWTIE_PTHREADS=0'.

 Using the 'bowtie' Aligner
 --------------------------

 The 'bowtie' aligner takes an index and a set of reads as input and
 outputs a list of alignments.  Alignments are selected according to a
 combination of the -v/-n/-e/-l options, which define which alignments
 are legal, and the -k/-a/--best/--nostrata options which define which
 and how many legal alignments should be reported.

 By default, Bowtie enforces a policy that is equivalent to Maq's
 quality-aware policy (http://maq.sf.net) (-n 2 -l 28 -e 70), but it
 can also be made to enforce an end-to-end k-difference policy
 equivalent to SOAP's (http://soap.genomics.org.cn/) (-v 2).

 The process by which bowtie chooses an alignment to report is
 randomized in order to avoid "mapping bias" - the phenomenon whereby
 an aligner systematically fails to report a particular class of good
 alignments, causing spurious "holes" in the comparative assembly.
 Whenever bowtie reports a subset of the valid alignments that exist,
 it makes an effort to sample them randomly.  Some bias may still
 exist.

 Indels and paired-end alignment are not currently supported.
 Alignment in ABI "color space" is also not currently supported.

 Bowtie is designed to be very fast for read sets where a) many of the
 reads have at least one good, valid alignment, b) many of the reads
 are relatively high-quality, c) the number of alignments reported per
 read is small (close to 1).  These criteria are generally satisfied in
 the context of modern short-read analyses such as RNA-seq, ChIP-seq,
 other types of -seq, and especially mammalian genotyping (e.g. the
 1000 Genomes Project).  You may observe longer running times in other
 research contexts.  If you find Bowtie's performance to be
 disappointingly slow, please try the hints described in the "High
 Performance Tips" section below.  If Bowtie continues to be too slow,
 contact us and tell us the nature of your research application and the
 parameters you are using to run Bowtie.  We are eager to hear your
 feedback.

  Maq-like Policy
  ---------------

  When the -n option is specified (and it is by default), Bowtie
  determines which alignments are valid according to the following
  policy, which is equivalent to Maq's default policy:

  1. Alignments may have no more than N mismatches in the first L
     bases on the high-quality end of the read.

  2. The sum of the quality values at all mismatched positions may not
     exceed E (where each position has a quality value on a phred-like
     scale of 0 up to about 40).

  The N, L and E parameters are configured using Bowtie's -n, -l and
  -e options.
 
  If there are many possible alignments that satisfy both criteria,
  Bowtie will make an effort to give preference to alignments with
  where the sum from criterion 2 is smaller.  Bowtie does not guarantee
  that it will report the minimum-sum alignment.
  
  Note that Maq internally rounds base qualities to the nearest 10 and
  truncates qualities greater than 30 to 30.  To maintain compatibility
  with Maq, Bowtie does the same.
 
  Also note that bowtie is not fully sensitive in -n 2 and -n 3
  modes.  In those modes, bowtie imposes a "backtracking limit" to
  limit the amount of effort spent trying to find valid alignments for
  low-quality reads that are unlikely have any.  Since the limit is
  arbitrary, it may cause bowtie to miss some legal 2- and 3-mismatch
  alignments.  We have set the limit to what we consider a reasonable
  default (125), but the user may decrease or increase the limit using
  the --maxbts option.  Setting the limit to a very large number
  (>10000) guarantees full sensitivity.
 
  End-to-end k-difference Policy
  ------------------------------
  
  The policy has one criterion: Alignments may have no more than V
  mismatches.  Quality values are ignored.  The number of mismatches
  permitted is configurable with the -V option.
  
  High Performance Tips
  ---------------------
  
  Tip 1: If your computer has multiple processors/cores, try -p
   
  The -p <int> option causes Bowtie to launch <int> parallel search
  threads.  Each thread runs on a different processor/core and all
  threads find alignments in parallel, increasing alignment throughput
  by approximately a multiple of <int>.
  
  Tip 2: If reporting many alignments per read, try a denser index
   
  If you are using the -k, -a or -m options and Bowtie is reporting
  many alignments per read (an average of more than about 10 per read)
  and you have some physical memory to spare, then consider building
  an index with a denser SA sample.
  
  To build an index with a denser SA sample, specify a smaller
  --offrate value when running 'bowtie-build'.  A denser SA sample
  leads to a larger index, but is also particularly effective at
  speeding up alignment when then number of alignments reported per
  read is large.  For example, if the number of alignments per read is
  very large, decreasing the index's --offrate by 1 could as much as
  double alignment performance, and decreasing by 2 could quadruple
  alignment performance, etc.
  
  On the other hand, decreasing --offrate increases the size of the
  Bowtie index, both on disk and in memory when aligning reads.  At the
  default --offrate of 5, the SA sample for the human genome occupies
  about 375 MB of memory when aligning reads.  Decreasing the --offrate
  by 1 doubles the memory taken by the SA sample, and decreasing by 2
  quadruples the memory taken, etc.

  Command Line
  ------------

  The following is a detailed description of the options used to control
  the 'bowtie' aligner:

 Usage: bowtie [options]* <ebwt_base> <query_in> [<hit_outfile>]

  <ebwt_base>        The basename of the index to be searched.  The
                     basename is the name of any of the four index
                     files up to but not including the first period.
                     bowtie first looks in the current directory for
                     the index files, then looks in the 'indexes'
                     subdirectory under the directory where the
                     currently-running 'bowtie' executable is located,
                     then looks in the directory specified in the
                     BOWTIE_INDEXES environment variable.

  <query_in>         A comma-separated list of files containing the
                     reads to be aligned, or, if -c is specified, the
                     sequences themselves. E.g., this might be
                     "lane1.fq,lane2.fq,lane3.fq,lane4.fq", or, if -c
                     is specified, this might be "GGTCATCCT,ACGGGTCGT"

  <hit_outfile>      File to write alignments to.  By default,
                     alignments are written to stdout (the console).

 Options:
 
  -q                 The query input files (specified as <query_in>)
                     are FASTQ files (usually having extension .fq or
                     .fastq).  This is the default.  See also:
                     --solexa-quals.

  -f                 The query input files (specified as <query_in>)
                     are FASTA files (usually having extension .fa,
                     .mfa, .fna or similar).  All quality values are
                     assumed to be 40.

  -r                 The query input files (specified as <query_in>)
                     are Raw files: one sequence per line, without
                     quality values or names.

  -c                 The query sequences are given on command line.
                     I.e. <query_in> is a comma-separated list of
                     reads rather than a list of read files.

  -e/--maqerr <int>  The maximum permitted total of quality values at
                     mismatched read positions.  This total is also
                     called the "quality-weighted hamming distance" or
                     "Q-distance."  This is analogous to the -e option
                     for "maq map".  The default is 70.  Note that,
                     like Maq, Bowtie rounds quality values to the
                     nearest 10 and saturates at 30.
  
  -l/--seedlen <int> The "seed length"; i.e., the number of bases on
                     the high-quality end of the read to which the -n
                     ceiling applies.  The default is 28.

  -n/--seedmms <int> The maximum number of mismatches permitted in the
                     seed.  This may be 0, 1, 2 or 3 and the default is
                     2.

  -v <int>           Forego the Maq-like alignment policy and use a
                     SOAP-like alignment policy.  I.e., report end-to-
                     end alignments with at most <int> mismatches.  If
                     -v is specified, quality values and the -e, -l and
                     -n options are ignored.

  -k <int>           Report up to <int> valid alignments per read
                     (default: 1).  Validity of alignments is
                     determined by the alignment policy (combined
                     effects of -n, -v, -l, and -e).  If many
                     alignments are reported, they may be subject to
                     stratification; see --best, --nostrata.  Bowtie is
                     designed to be very fast for small -k but BOWTIE
                     CAN BECOME VERY SLOW AS -k INCREASES.  If you
                     would like to use Bowtie for larger values of -k,
                     consider building an index with a denser suffix-
                     array sample, i.e. specify a smaller '--offrate'
                     when invoking 'bowtie-build' for the relevant
                     index.  This will increase the memory footprint of
                     the index, but makes alignment much faster for
                     large -k.

  -a/--all           Report all valid alignments per read (default:
                     off).  Validity of alignments is determined by the
                     alignment policy (combined effects of -n, -v, -l,
                     and -e).  Reported alignments may be subject to
                     stratification; see --best, --nostrata.  Bowtie is
                     designed to be very fast for small -k; BOWTIE CAN
                     CAN BECOME VERY SLOW IF -a/--all IS SPECIFIED.  If
                     you would like to use Bowtie with -a, consider
                     building an index with a denser suffix-array
                     sample, i.e. specify a smaller '--offrate' when
                     invoking 'bowtie-build' for the relevant index.
                     This will increase the memory footprint of the
                     index, but makes alignment much faster in -a mode.

  -m <int>           Suppress all alignments for a particular read if
                     more than <int> reportable alignments exist for
                     it.  Reportable alignments are those that would be
                     reported given the -n, -v, -l, -e, -k, -a, --best,
                     and --nostrata options.  Default: no limit.
                     Bowtie is designed to be very fast for small -m
                     but BOWTIE CAN BECOME VERY SLOW AS -m INCREASES.

  --best             Reported alignments must belong to the best
                     possible alignment "stratum" (default: off).  A
                     stratum is a category defined by the number of
                     mismatches present in the alignment (for -n, the
                     number of mismatches present in the seed region of
                     the alignment).  E.g., if --best is not specified,
                     Bowtie may sometimes report an alignment with 2
                     mismatches in the seed even though there exists an
                     unreported alignment with 1 mismatch in the seed.
                     BOWTIE IS ABOUT 3-5 TIMES SLOWER WHEN --best IS
                     SPECIFIED.

  --nostrata         If many valid alignments exist and are reportable
                     (according to the --best and -k options) and they
                     fall into various alignment "strata", report all
                     of them.  By default, Bowtie only reports those
                     alignments that fall into the best stratum, i.e.,
                     the one with fewest mismatches.  BOWTIE CAN BECOME
                     VERY SLOW WHEN --nostrata IS COMBINED WITH -k OR
                     -a. 

  -5/--trim5 <int>   Trim <int> bases from high-quality (left) end of
                     each read before alignment (default: 0).

  -3/--trim3 <int>   Trim <int> bases from low-quality (right) end of
                     each read before alignment (default: 0).

  -p/--threads <int> Launch <int> parallel search threads (default: 1).
                     Threads will run on separate processors/cores and
                     synchronize when grabbing reads and outputting
                     alignments.  Searching for alignments is almost
                     totally parallel, and speedup is close to linear.
                     Speedup suffers somewhat in -z mode.  This option
                     is only available if bowtie is linked with the
                     pthreads library (i.e. if BOWTIE_PTHREADS=0 is not
                     specified at build time).

  -u/--qupto <int>   Only align the first <int> reads from the
                     specified read set.  Default: no limit.

  --unfa <filename>  Write all reads that fail to align to a FASTA file
                     with name <filename>.

  --unfq <filename>  Write all reads that fail to align to a FASTQ file
                     with name <filename>.

  -t/--time          Print the amount of wall-clock time taken by each
                     search phase and index turnover.

  -z/--phased        Alternate between using the forward and mirror
                     indexes in a series of phases such that only one
                     "half" of the index is resident in memory at one
                     time.  This uses about half the amount of memory
                     as the default (which keeps both forward and
                     mirror indexes resident in memory at once), but is
                     somewhat slower, scales worse (see -p), and is
                     incompatible with use of --best or -k greater than
                     1.

  --solexa-quals     Convert FASTQ qualities from solexa-scaled (which
                     can be negative) to phred-scaled (which can't).
                     The formula for conversion is phred-qual =
                     10 * log(1 + 10 ** (solexa-qual/10.0)) / log(10).
                     Used with -q.  Default: off.

  --integer-quals    Quality values are represented in the FASTQ file
                     as space-separated ASCII integers, e.g.,
                     "40 40 30 40...", rather than ASCII characters,
                     e.g., "II?I...".  Used with -q.  Default: off.

  --nomaqround       Maq accepts quality values in the Phred scale, but
                     internally rounds quality values to the nearest 10
                     saturating at 30.  By default, Bowtie imitates
                     this behavior.  Use --nomaqround to cancel
                     rounding in Bowtie.

  --ntoa             No-confidence bases in reads (usually 'N' or '.')
                     are converted to As before alignment.  By default,
                     no-confidence bases do not match any base. 

  --concise          Print alignments in a concise format. Each line
                     has format 'read_idx{-|+}:<ref_idx,ref_off,mms>',
                     where read_idx is the index of the read mapped,
                     {-|+} is the orientation of the read, ref_idx is
                     the index of the reference sequence aligned to,
                     ref_off is the offset into the reference sequence,
                     and mms is the number of mismatches in the
                     alignment.  Each alignment appears on a separate
                     line.

  -b/--binout        Outout alignments in a concise binary format.  If
                     this is specified, <hit_outfile> must also be
                     specified. 

  --refout           Write alignments to a set of files named
                     refXXXXX.map, where XXXXX is the 0-padded index of
                     the reference sequence aligned to.  This can be a
                     useful way to break up work for downstream
                     analyses when dealing with, for example, large
                     numbers of reads aligned to the assembled human
                     genome.  If <hit_outfile> is also specified, it
                     will be ignored.

  --refidx           When a reference sequence is referred to in a
                     reported alignment, refer to it by 0-based index
                     (its offset into the list of references that were
                     indexed) rather than by name.

  --maxbts           The maximum number of backtracks permitted when
                     aligning a read in -n 2 or -n 3 mode (default:
                     125).  A "backtrack" is the introduction of a
                     speculative substitution into the alignment.
                     Without this limit, the default paramters will
                     sometimes require that 'bowtie' try 100s or 1,000s
                     of backtracks to align a read, especially if the
                     read has many low-quality bases and/or has no
                     valid alignments, slowing bowtie down
                     significantly.  The drawback of having a limit is
                     that some valid alignments may be missed.  Higher
                     limits yield greater sensitivity at the expensive
                     of longer running times.  

  --maxns <int>      Skip reads with more than <int> N's (no-confidence
                     bases) in their sequence.  Default: no limit.

  -o/--offrate <int> Override the offrate of the index with <int>.  If
                     <int> is greater than the offrate used to build
                     the index, then some row markings are discarded
                     when the index is read into memory.  This reduces
                     the memory footprint of the aligner but requires
                     more time to calculate text offsets.  <int> must
                     be greater than the value used to build the index.

  --seed <int>       Use <int> as the seed for pseudo-random number
                     generator.

  --verbose          Print verbose output (for debugging).

  -h/--help          Print detailed description of tool and its options
                     (from MANUAL).

  --version          Print version information and quit.

  Output
  ------

  The 'bowtie' aligner outputs each alignment on a separate line.  Each
  line is a collection of 8 fields separated by tabs; from left to
  right, the fields are:

   1. Name of read that aligned

   2. Orientation of read in the alignment, '-' for reverse complement,
      '+' otherwise

   3. Name of reference sequence where alignment occurs, or ordinal ID
      if no name was provided

   4. 0-based offset into the reference sequence where leftmost
      character of the alignment occurs

   5. Read sequence (reverse-complemented if orientation is '-')

   6. Read qualities (reversed if orientation is '-')

   7. Reserved

   8. Comma-separated list of mismatch descriptors.  If there are no
      mismatches in the alignment, this field is empty.  A single
      descriptor has the format offset:reference-base>read-base.  The
      offset is expressed as a 0-based offset from the high-quality
      (5') end of the read. 

 Using the 'bowtie-build' Indexer
 --------------------------------

 Use 'bowtie-build' to build a Bowtie index from a set of DNA
 sequences.  bowtie-build outputs a set of 4 files named NAME.1.ebwt,
 NAME.2.ebwt, NAME.rev.1.ebwt, and NAME.rev.2.ebwt, where NAME is
 <index_basename> supplied by the user on the command line.  These
 files together constitute the index: they are all that is needed to
 align reads to the reference sequences.  The original sequence files
 are no longer used by Bowtie once the index is built.  

 Use of Karkkainen's blockwise algorithm (see reference #4 below)
 allows bowtie-build to trade off between running time and memory
 usage. bowtie-build has three options governing how it makes this
 trade: -p/--packed, --bmax/--bmaxdivn, and --dcv.  By default, bowtie-
 build will automatically search for the settings that yield the best
 running time without exhausting memory.  This behavior can be disabled
 using the -a/--noauto option.

 The indexer provides options pertaining to the "shape" of the index,
 e.g. --offrate governs the fraction of Burrows-Wheeler rows that are
 "marked" (see reference #2).  All of these options are potentially
 profitable trade-offs depending on the application.  They have been
 set to defaults that are reasonable for most cases according to our
 experiments.  See "High Performance Tips" in the "Using the 'bowtie'
 Aligner" section for additional details.

 Because bowtie-build uses 32-bit pointers internally, it can handle up
 to a maximum of 2^32-1 (somewhat more than 4 billion) characters in an
 index.  If your reference exceeds 2^32-1 characters, bowtie-build will
 print an error message and abort.  To resolve this, please divide your
 reference sequences into smaller batches and/or chunks and build a
 separate index for each.  

 The Bowtie index is based on the FM Index of Ferragina and Manzini,
 which in turn is based on the Burrows-Wheeler transform.  The
 algorithm used to build the index is based on the blockwise algorithm
 of Karkkainen.  For more information on these techniques, see these
 references:

 1. Burrows M, Wheeler DJ: A block sorting lossless data compression
    algorithm. Digital Equipment Corporation, Palo Alto, CA 1994,
    Technical Report 124.
 2. Ferragina, P. and Manzini, G. 2000. Opportunistic data structures
    with applications. In Proceedings of the 41st Annual Symposium on
    Foundations of Computer Science (November 12 - 14, 2000). FOCS
 3. Ferragina, P. and Manzini, G. 2001. An experimental study of an
    opportunistic index. In Proceedings of the Twelfth Annual ACM-SIAM
    Symposium on Discrete Algorithms (Washington, D.C., United States,
    January 07 - 09, 2001). 269-278.
 4. Karkkainen, J. 2007. Fast BWT in small space by blockwise suffix
    sorting. Theor. Comput. Sci. 387, 3 (Nov. 2007), 249-257

  Command Line
  ------------

 Usage: bowtie-build [options]* <reference_in> <index_basename>

    <reference_in>          A comma-separated list of FASTA files
                            containing the reference sequences to be
                            aligned to, or, if -c is specified, the
                            sequences themselves. E.g., this might be
                            "chr1.fa,chr2.fa,chrX.fa,chrY.fa", or, if
                            -c is specified, this might be
                            "GGTCATCCT,ACGGGTCGT,CCGTTCTATGCGGCTTA".

    <index_basename>        The basename of the index files to write.

 Options:

    -f                      The reference input files (specified as
                            <reference_in>) are FASTA files (usually
                            having extension .fa, .mfa, .fna or
                            similar).

    -c                      The reference sequences are given on the
                            command line.  I.e. <reference_in> is a
                            comma-separated list of sequences rather
                            than a list of FASTA files.

    -a/--noauto             Disable the default behavior whereby
                            bowtie-build automatically selects values
                            for --bmax/--dcv/--packed parameters
                            according to the memory available.  User
                            may specify values for those parameters.
                            If memory is exhausted during indexing, an
                            error message will be printed; it is up to
                            the user to try new parameters.

    -p/--packed             Use a packed (2-bits-per-nucleotide)
                            representation for DNA strings.  This saves
                            memory but makes indexing 2-3 times slower.
                            Default: off.  This is configured
                            automatically by default; use -a/--noauto
                            to configure manually. 

    --bmax <int>            The maximum number of suffixes allowed in a
                            block.  Allowing more suffixes per block
                            makes indexing faster, but increases memory
                            overhead.  Overrides any previous
                            specification of --bmax, --bmaxmultsqrt or
                            --bmaxdivn.  Default: --bmaxdivn 4.  This
                            is configured automatically by default; use
                            -a/--noauto to configure manually.

    --bmaxdivn <int>        The maximum number of suffixes allowed in a
                            block, expressed as a fraction of the
                            length of the reference.  Overrides any
                            previous specification of --bmax,
                            --bmaxmultsqrt or --bmaxdivn. Default:
                            --bmaxdivn 4.  This is configured
                            automatically by default; use -a/--noauto
                            to configure manually.

    --dcv <int>             Use <int> as the period for the difference-
                            cover sample.  A larger period yields less
                            memory overhead, but may make suffix
                            sorting slower, especially if repeats are
                            present.  Must be a power of 2 no greater
                            than 4096.  Default: 1024.  This is
                            configured automatically by default; use
                            -a/--noauto to configure manually.

    --nodc                  Disable use of the difference-cover sample.
                            Suffix sorting becomes quadratic-time in
                            the worst case (where the worst case is an
                            extremely repetitive reference).  Default:
                            off.

    -o/--offrate <int>      To map alignments back to positions on the
                            reference sequences, it's necessary to
                            annotate ("mark") some or all of the
                            Burrows-Wheeler rows with their
                            corresponding location on the genome.  The
                            offrate governs how many rows get marked:
                            the indexer will mark every 2^<int> rows.
                            Marking more rows makes reference-position
                            lookups faster, but requires more memory to
                            hold the annotations at runtime.  The
                            default is 5 (every 32nd row is marked; for 
                            human genome, annotations occupy about 340
                            megabytes).  

    -t/--ftabchars <int>    The ftab is the lookup table used to
                            calculate an initial Burrows-Wheeler range
                            with respect to the first <int> characters
                            of the query.  A larger <int> yields a
                            larger lookup table but faster query times.
                            The ftab has size 4^(<int>+1) bytes.  The
                            default is 10 (ftab is 4MB).

    --ntoa                  Convert Ns in the reference sequence to As
                            before building the index.  By default, Ns
                            are simply excluded from the index and
                            'bowtie' will not find alignments that
                            overlap them.

    --big --little          Endianness to use when serializing integers
                            to the index file.  Default: little-endian
                            (recommended for Intel- and AMD-based
                            architectures).

    --seed <int>            Use <int> as the seed for pseudo-random
                            number generator.

    --cutoff <int>          Index only the first <int> bases of the
                            reference sequences (cumulative across
                            sequences) and ignore the rest.

    --oldpmap               bowtie-build switched schemes for mapping
                            "joined" reference locations to original
                            reference locations in version 0.9.8.  The
                            new scheme has the advantage that it does
                            not use padding.  This option activates the
                            old padding-based scheme used in versions
                            prior to 0.9.8.  Versions of 'bowtie' prior
                            to 0.9.8 can query only indexes that use
                            the old scheme.  Version of 'bowtie'
                            starting with 0.9.8 can query indexes using
                            either scheme.  This option will be
                            deprecated in version 1.0. 

    -q/--quiet              bowtie-build is verbose by default.  With
                            this option ebwt-build will print only
                            error messages.

    -h/--help               Print detailed description of tool and its
                            options (from MANUAL).

    --version               Print version information and quit.

 Using the 'bowtie-maptool' Alignment Converter
 ----------------------------------------------
 
 'bowtie-maptool' allows the user to convert between alignment formats
 generated by Bowtie.  It is most useful for converting from Bowtie's
 compact binary output format (-b/--binout), which is most appropriate
 for archiving large sets of alignments, to Bowtie's more verbose tab-
 delimited human-readable format (Bowtie's default output).  It can
 also be used to sort a set of alignments with respect to the
 alignments' position on the reference (-s/--sort).  This is a
 necessary first step to most analyses, including consensus and SNP
 calling.  At this time, to sort triggered by the -s/--sort option
 occurs entirely in memory, so sorting very large sets of reads may
 exhaust memory.
 
 For information about converting Bowtie alignment to Maq's .map
 format, see the next section on using 'bowtie-maqconvert'.
 
  Command Line
  ------------
 
 Usage: bowtie-maptool [options]* <align_in> [<align_out>]
 
    <align_in>      Alignment file output by bowtie to be converted, or
                    "-" to convert alignments from stdin.

    [<align_out>]   Converted alignment file to output.  Default: write
                    alignments to stdout.  <align_out> must be
                    specified when -B/--outbin is used.

 Options:

    -d/--indef      <align_in> is in Bowtie's default tab-delimited,
                    human-readable output format.

    -b/--inbin      <align_in> is in Bowtie's compact binary
                    (-b/--binout) format (default).

    -D/--outdef     <align_out> will be in Bowtie's default tab-
                    delimited, human-readable output format  (default).

    -B/--outbin     <align_out> will be in Bowtie's compact binary
                    (-b/--binout) format.

    -C/--outconcise <align_out> will be in Bowtie's --concise format.

    -Q/--outfastq   <align_out> will consist of aligned reads in FASTQ
                    format.

    -F/--outfasta   <align_out> will consist of aligned reads in FASTA
                    format.

    -s/--sort       Sort hits by reference position before outputting.
                    Sorts first by referene sequence (sequences that
                    appeared earlier in the input have priority), then
                    by offset into the sequence (alignments appearing
                    closer to the left-hand end of the sequence have
                    priority).

    -v/--verbose    Print verbose output (for debugging).

    -h/--help       Print detailed description of tool and its options
                    (from MANUAL).

    --version       Print version information and quit.

 Using the 'bowtie-maqconvert' Alignment Converter
 ----------------------------------------------

 Note that Maq changed its output format as of version 0.7.0 in order
 to accomodate read lengths up to 127 bases.  Be sure to use the -o
 option of bowtie-maqconvert if you plan to use the results with a Maq
 version prior to 0.7.0.

  Command Line
  ------------
 
 Usage: bowtie-maqconvert [options]* <in.bwtmap> <out.map> <chr.bfa>
 
    <in.bwtmap>   An alignments file generated by Bowtie.  Need not
                  have any particular extension.

    <out.map>     Name of Maq-alignment file to output.  Need not have
                  any particular extension.
    
    <chr.bfa>     The .bfa version of the reference sequences(s).  Use
                  'maq fasta2bfa' to build this.  It must be built
                  using the exact same reference sequences as were used
                  to build the Bowtie index.

 Options:

    -o            Output uses Maq's old (pre-0.7.0) format.

    -v            Print verbose output (for debugging).

    -h/-?         Print detailed description of tool and its options
                  (from MANUAL).

 Using the 'bowtie-inspect' Index Inspector
 ------------------------------------------

 'bowtie-inspect' extracts information from a Bowtie index about the
 original reference sequences that were used to build it.  By default,
 the tool will output a FASTA file containing the sequences of the
 original references (with all non-A/C/G/T characters converted to Ns).
 It can also be used to extract just the reference sequence names using
 the -n option.

  Command Line
  ------------
 
 Usage: bowtie-inspect [options]* <ebwt_base>

  <ebwt_base>        The basename of the index to be inspected.  The
                     basename is the name of any of the four index
                     files up to but not including the first period.
                     bowtie first looks in the current directory for
                     the index files, then looks in the 'indexes'
                     subdirectory under the directory where the
                     currently-running 'bowtie' executable is located,
                     then looks in the directory specified in the
                     BOWTIE_INDEXES environment variable.

 Options:

  -a/--across <int>  When printing FASTA output, output a newline
                     character every <int> bases (default: 60).

  -n/--names         Print reference sequence names only; ignore
                     sequence.

  -v/--verbose       Print verbose output (for debugging).

  -h/--help          Print detailed description of tool and its options
                     (from MANUAL).
