Bowtie: an Ultrafast, Lightweight Short Read Aligner

Bowtie Manual
=============

 Obtaining Bowtie Binaries
 -------------------------
 
 Obtain Bowtie binaries for your platform from the Download section of
 the Sourceforge project site.  Binaries are currently available for
 Linux, Windows, and Mac OS X.
 
 https://sourceforge.net/project/showfiles.php?group_id=236897&package_id=288231
 
 Obtaining and Building Bowtie Sources
 -------------------------------------
 
 Building Bowtie requires a GNU-like environment that includes GCC, GNU
 Make and other basics.  It should be possible to build Bowtie on
 a vanilla Linux or Mac installation.  Bowtie can also be built on
 Windows using Cygwin or MinGW (recommended).  If building with MinGW,
 first install MinGW and MSYS (http://www.mingw.org/), the zlib library
 (http://cygwin.com/packages/mingw-zlib/), and the pthreads library
 (http://sourceware.org/pthreads-win32/).
 
 Bowtie depends on code from Maq v0.6.6 (http://maq.sf.net) and from
 the SeqAn library v1.1 (http://www.seqan.de).  However, all supporting
 code is included in the Bowtie source archive, so there is no need to
 download additional sources.
 
 Obtain Bowtie sources from the Download section of the Sourceforge
 project site:
 
 https://sourceforge.net/project/showfiles.php?group_id=236897&package_id=288231
 
 Extract the sources, change to the directory where they were
 extracted, and build the Bowtie tools by running GNU make (usually
 with the command 'make', but sometimes with 'gmake') with no
 arguments.  If building with MinGW, run GNU make from the MSYS
 environment.

 Using the 'bowtie' Aligner
 --------------------------
 
 The 'bowtie' aligner takes an index and a set of reads as input and
 outputs a list of alignments.  At most one alignment is output per
 read.  Alignments are selected according to an 'alignment policy' that
 states which alignments are legal.  By default, Bowtie utilizes a
 policy that is equivalent to Maq's quality-aware policy
 (http://maq.sf.net), but it can also be made to enforce an end-to-end
 k-difference policy closer to SOAP's (http://soap.genomics.org.cn/).
 
  Maq-like Policy
  ---------------
 
  The policy has two criteria:
 
  1. Alignments may have no more than 2 mismatches in the first 28
     bases on the high-quality end of the read.

  2. The sum of the quality values at all mismatched positions may not
     exceed 70 (where each position has a quality value on a phred-like
     scale of 0-40).
 
  The numbers stated above are configurable using Bowtie's -n, -e and
  -l options.
 
  If there are many possible alignments that satisfy both criteria,
  Bowtie will give preference to alignments with where the sum from
  criterion 2 is smaller.  Bowtie will not necessarily report the the
  minimal-sum alignment in this case.  
 
  End-to-end k-difference Policy
  ------------------------------
  
  The policy has one criterion: Alignments may have no more than 2
  mismatches.  Quality values are ignored.  The number of mismatches
  permitted is configurable.  Permitting indels is future work.
  
  Command Line
  ------------

  The following is a detailed description of the options used to control
  the 'bowtie' aligner:

 Usage: bowtie [options]* <ebwt_base> <query_in> [<hit_outfile>]

  <ebwt_base>        The basename of the index to be searched.  The
                     basename is the name of any of the four index
                     files up to but not including the first period.
                     bowtie first looks in the current directory for
                     the index files, then looks in the 'index'
                     subdirectory under the directory where the
                     currently-running 'bowtie' executable is located,
                     then looks in the directory specified in the
                     BOWTIE_INDEXES environment variable.

  <query_in>         A comma-separated list of files containing the
                     reads to be aligned, or, if -c is specified, the
                     sequences themselves. E.g., this might be
                     "lane1.fq,lane2.fq,lane3.fq,lane4.fq", or, if -c
                     is specified, this might be "GGTCATCCT,ACGGGTCGT"

  <hit_outfile>      File to write alignments to.  By default,
                     alignments are written to stdout (the console).

 Options:

  -q                 The query input files (specified as <query_in>)
                     are FASTQ files (usually having extension .fq or
                     .fastq).  This is the default.  See also:
                     --solexa-quals.

  -f                 The query input files (specified as <query_in>)
                     are FASTA files (usually having extension .fa,
                     .mfa, .fna or similar).  All quality values are
                     assumed to be 40.

  -c                 The query sequences are given on command line.
                     I.e. <query_in> is a comma-separated list of
                     reads rather than a list of read files.

  -e/--maqerr <int>  The maximum permitted total of quality values at
                     mismatched read positions.  This total is also
                     called the "quality-weighted hamming distance" or
                     "Q-distance."  This is analogous to the -e option
                     for "maq map".  The default is 70.  Note that,
                     like Maq, Bowtie rounds quality values to the
                     nearest 10 and saturates at 30.
  
  -l/--seedlen <int> The "seed length"; i.e., the number of bases on
                     the high-quality end of the read to which the -n
                     ceiling applies.  The default is 28.

  -n/--seedmms <int> The maximum number of mismatches permitted in the
                     seed.  This may be 0, 1 or 2 and the default is 2.

  -v <int>           Forego the Maq-like alignment policy and use a
                     SOAP-like alignment policy.  I.e., report end-to-
                     end alignments with at most <int> mismatches.  If
                     -v is specified, quality values and the -e, -l and
                     -n options are ignored. 
  
  -5/--trim5 <int>   Trim <int> bases from high-quality (left) end of
                     each read before alignment.  Default: 0.

  -3/--trim3 <int>   Trim <int> bases from low-quality (right) end of
                     each read before alignment.  Default: 0.

  -u/--qupto <int>   Only align the first <int> reads from the
                     specified read set.  Default: no limit.
  
  -t/--time          Print the amount of wall-clock time taken by each
                     search phase and index turnover.
  
  --solexa-quals     Convert FASTQ qualities from solexa-scaled to
                     phred-scaled.  Used with -q.  Default: off.
  
  --concise          Print alignments in a concise format; in this
                     mode, each line is a separate.
  
  --maxns <int>      Skip reads with more than <int> N's (no-confidence
                     bases) in their sequence.  Default: no limit.
  
  -o/--offrate <int> Override the offrate of the index with <int>.  If
                     <int> is greater than the offrate used to build
                     the index, then some row markings are discarded
                     when the index is read into memory.  This reduces
                     the memory footprint of the aligner but requires
                     more time to calculate text offsets.  <int> must
                     be greater than the value used to build the index.

  --seed <int>       Use <int> as the seed for pseudo-random number
                     generator.

  --verbose          Print verbose output (for debugging).

  --version          Print version information and quit.

  Output
  ------
 
  The 'bowtie' aligner outputs each alignment on a separate line.  Each
  line is a collection of 8 fields separated by tabs; from left to
  right, the fields are:
  
   1. Read name
   2. Read orientation ('-' or '+')
   3. Index of reference sequence aligned to
   4. Offset into reference sequence of alignment
   5. Read sequence (reverse-complemented if orientation is '-')
   6. Read qualities (reversed if orientation is '-')
   7. Reserved
   8. Comma-separated list of mismatch positions, as offsets from high-
      quality end
 
 Using the 'bowtie-build' Indexer
 --------------------------------
 
 The Bowtie index is based on the FM Index of Ferragina and Manzini,
 and the algorithm used to build it is the blockwise algorithm of
 Karkkainen.  For more information on these techniques, see these
 references:
 
  * Ferragina, P. and Manzini, G. 2000. Opportunistic data structures
    with applications. In Proceedings of the 41st Annual Symposium on
    Foundations of Computer Science (November 12 - 14, 2000). FOCS
  * Ferragina, P. and Manzini, G. 2001. An experimental study of an
    opportunistic index. In Proceedings of the Twelfth Annual ACM-SIAM
    Symposium on Discrete Algorithms (Washington, D.C., United States,
    January 07 - 09, 2001). 269-278.
  * Karkkainen, J. 2007. Fast BWT in small space by blockwise suffix
    sorting. Theor. Comput. Sci. 387, 3 (Nov. 2007), 249-257
 
 bowtie-build allows the user to trade off between running time and
 memory footprint.  By default, bowtie-build will use an amount of
 memory equal to about 30% the size of the suffix array for the
 sequence: about 4 gigabytes for the human genome.
 
 The indexer provides many options pertaining to the "shape" of the
 index, e.g., --linerate and --linesperside govern the size of the
 Ferragina-Manzini buckets, and --offrate governs the number of marked
 rows.  All of these options are potentially profitable trade-offs.
 They have been set to defaults that are reasonable for most cases
 according to our experiments.
   
  Command Line
  ------------
 
 Usage: bowtie-build [options]* <reference_in> <ebwt_outfile_base>
 
    <reference_in>          A comma-separated list of files containing
                            the reference sequences to be aligned to,
                            or, if -c is specified, the sequences
                            themselves. E.g., this might be
                            "chr1.fa,chr2.fa,chrX.fa,chrY.fa", or, if
                            -c is specified, this might be
                            "GGTCATCCT,ACGGGTCGT,CCGTTCTATGCGGCTTA".

    <ebwt_outfile_base>     The basename of the index files to write.

 Options:

    -f                      The reference input files (specified as
                            <reference_in>) are FASTA files (usually
                            having extension .fa, .mfa, .fna or
                            similar).
    
    -c                      The reference sequences are given on the
                            command line.  I.e. <reference_in> is a
                            comma-separated list of sequences rather
                            than a list of FASTA files.
    
    --bmax <int>            The maximum number of suffixes allowed in a
                            block.  Allowing more suffixes per block
                            makes indexing faster, but increases memory
                            overhead.  Default: --bmaxdivn 8 is used.
    
    --bmaxmultsqrt <int>    The maximum number of suffixes allowed in a
                            block, expressed as a multiple of the
                            square root of the length of the reference.
                            Default: --bmaxdivn 8 is used.
    
    --bmaxdivn <int>        The maximum number of suffixes allowed in a
                            block, expressed as a fraction of the
                            length of the reference.  Default: 8.
    
    --dcv <int>             Use <int> as the period for the difference-
                            cover sample.  A larger period yields less
                            memory overhead, but may make suffix
                            sorting slower, especially if repeats are
                            present.  Must be a power of 2 no greater
                            than 4096.  Default: 1024.
    
    --nodc                  Disable use of the difference-cover sample.
                            Suffix sorting becomes quadratic worst-case
                            time.
    
    -l/--linerate <int>     The size of a cache line is considered to
                            be 2^<int> bytes.  Default: 6 (64 bytes,
                            as in Intel and AMD architectures).
    
    -i/--linesperside <int> Number of cache lines in a "side".  A side
                            is half a bucket, and buckets correspond 1-
                            to-1 to cumulative character-occurrence
                            counts.  Deafult: 1 (bucket is 128 bytes,
                            16 bytes used for A/C/G/T occurrence counts
                            up to the bucket's halfway point, 112 bytes
                            used to hold 448 characters of the Burrows-
                            Wheeler Transform).
    
    -o/--offrate <int>      To map alignments back to positions on the
                            reference sequences, it's necessary to
                            annotate ("mark") some or all of the
                            Burrows-Wheeler rows with their
                            corresponding location on the genome.  The
                            offrate governs how many rows get marked:
                            the indexer will mark every 2^<int> rows.
                            Marking more rows makes reference-position
                            lookups faster, but requires more memory to
                            hold the annotations at runtime.  The
                            default is 5 (every 32nd row is marked; for 
                            human genome, annotations occupy about 340
                            megabytes).  
    
    -t/--ftabchars <int>    The ftab is the lookup table used to
                            calculate an initial Burrows-Wheeler range
                            with respect to the first <int> characters
                            of the query.  A larger <int> yields a
                            larger lookup table but faster query times.
                            The ftab has size 4^(<int>+1) bytes.  The
                            default is 10 (ftab is 4MB).
    
    -h/--chunkrate <int>    Before being indexed, the reference
                            sequences are concatenated into a sequence
                            of chunks, where each chunk contains bases
                            from one of the input sequences (padding is
                            usually necessary for a sequence's final
                            chunk).  Each chunk is annotated with the
                            id of the reference sequence it holds, and
                            the offset into that sequence of the first
                            base in the chunk.  Larger chunks yield
                            less annotation overhead but more wasted
                            space due to padding.  If -h is specified,
                            the chunk size is set to 2^<int>.  The
                            default is 11 (2048-character chunks). 
    
    --big --little          Endianness to use when serializing integers
                            to the index file.  Default: little-endian
                            (recommended for Intel- and AMD-based
                            architectures).
    
    --seed <int>            Use <int> as the seed for pseudo-random
                            number generator.
    
    --cutoff <int>          Index only the first <int> bases of the
                            reference sequences (cumulative across
                            sequences) and ignore the rest.
    
    -v/--verbose            Verbose output (for debugging).
    
    --version               Print version information and quit.
 
 Using the 'bowtie-convert' Maq Map Converter
 --------------------------------------------
 
 Usage: bowtie_convert <in.bwtmap> <out.map> [refnames]
    -v     verbose output
